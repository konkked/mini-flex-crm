replicaCount: 1

fullnameOverride: miniflex-crm

hosts:
  - host: frontend.mfcrm-base.local
  - host: backend.mfcrm-base.local

redis:
  enabled: true

# App-specific Redis connection (for external or internal)
redisConfig:
  host: cache.mfcrm-base.local # Internal K8s service name if hosted, or AWS endpoint
  password: "MurfysSecretPassword#1127"
  port: 6379

# caching service configuration
cache:
  enabled: true # Set to false if using external Redis
  architecture: standalone
  image:
    repository: konkked/mfcrm-cache
    pullPolicy: Always
    tag: "latest"
  service:
    name: miniflex-crm-cache
    type: ClusterIP
    port: 6379
  auth:
    enabled: false # Enable and set password for security in production
  master:
    persistence:
      enabled: false # Enable for production

frontend:
  replicaCount: 1
  image:
    repository: konkked/mfcrm-frontend
    pullPolicy: Always
    tag: "latest"
  service:
    type: LoadBalancer
    port: 80
  resources: {}

backend:
  replicaCount: 1
  image:
    repository: konkked/mfcrm-backend
    pullPolicy: Always
    tag: "latest"
  service:
    type: LoadBalancer
    port: 80
  resources: {}

database:
  replicaCount: 1
  image:
    repository: konkked/mfcrm-database
    pullPolicy: Always
    tag: "latest"
  service:
    type: ClusterIP
    port: 5432
  env:
    POSTGRES_USER: admin
    POSTGRES_PASSWORD: admin
    POSTGRES_DB: miniflexcrm
  resources: {}

ingress:
  enabled: true
  className: nginx
  annotations: {}
  hosts:
    - host: frontend.mfcrm-base.local
      name: frontend
      paths:
        - path: /
          pathType: Prefix
      port:
        number: 80
    - host: backend.mfcrm-base.local
      name: backend
      paths:
        - path: /
          pathType: Prefix
      port:
        number: 80
  tls: []

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80

resources: {}
nodeSelector: {}
tolerations: []
affinity: {}